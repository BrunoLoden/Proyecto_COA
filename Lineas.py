# -*- coding: utf-8 -*-
"""
Created on Mon Dec  5 01:04:23 2022

@author: Bruno
"""

#nodos 
N = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
     14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]


Sb = 100
slack = 13
VOLL = 800


#datos de generación térmica
G =      ["g1",      "g2",      "g3",       "g4",       "g5",       "g6", "g7", "g8", "g9", "g10", "g11", "g12"]
BusG =   {"g1":18,   "g2":21,   "g3":1,     "g4":2,     "g5":15,    "g6":16, "g7":23, "g8":23, "g9":7, "g10":13, "g11":15, "g12":22}
Pg_max = {"g1":400,  "g2":400,  "g3":152,   "g4":152,   "g5":155,   "g6":155, "g7":310, "g8":350, "g9":350, "g10":591, "g11":60, "g12":300}
Pg_min = {"g1":100,  "g2":100,  "g3":30.4,  "g4":30.4,  "g5":54.25, "g6":54.25, "g7":108.5, "g8":140, "g9":75, "g10":206.85, "g11":12, "g12":0}
cg =     {"g1":5.47, "g2":5.47, "g3":13.32, "g4":13.32, "g5":16,    "g6":10.52, "g7":10.52, "g8":10.89, "g9":20.7, "g10":20.93, "g11":26.11, "g12":0}
RU =     {"g1":47,   "g2":47,   "g3":14,    "g4":14,    "g5":21,    "g6":21, "g7":21, "g8":28, "g9":49, "g10":21, "g11":7, "g12":35}
RD =     {"g1":47,   "g2":47,   "g3":14,    "g4":14,    "g5":21,    "g6":21, "g7":21, "g8":28, "g9":49, "g10":21, "g11":7, "g12":35}


#datos de generación eólica
E =      ["e1", "e2", "e3"]
BusE =   {"e1":8, "e2":19, "e3":21}
Pe_max = {"e1":200, "e2":150, "e3":100}
         
#datos de las lineas

L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
     21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]

BusL = {1:(1, 2), 2:(1, 3), 3:(1, 5), 4:(2, 4), 5:(2, 6), 6:(3, 9), 7:(3, 24), 
		8:(4, 9), 9:(5, 10), 10:(6, 10), 11:(7, 8), 12:(8, 9), 13:(8, 10), 
		14:(9, 11), 15:(9, 12), 16:(10, 11), 17:(10, 12), 18:(11, 13), 
		19:(11, 14), 20:(12, 13), 21:(12, 23), 22:(13, 23), 23:(14, 16), 
		24:(15, 16), 25:(15, 21), 26:(15, 24), 27:(16, 17), 28:(16, 19), 
		29:(17, 18), 30:(17, 22), 31:(18, 21), 32:(19, 20), 33:(20, 23), 
		34:(21, 22)}
         
r = { 1:0.0026,  2:0.0546,  3:0.0218,  4:0.0328,   5:0.0497,  6:0.0308,  7:0.0023, 
	  8:0.0268,  9:0.0228, 10:0.0139, 11:0.0159,  12:0.0427, 13:0.0427, 14:0.0023, 
	 15:0.0023, 16:0.0023, 17:0.0023, 18:0.0061,  19:0.0054, 20:0.0061, 21:0.0124, 
	 22:0.0111, 23:0.005,  24:0.0022, 25:0.00315, 26:0.0067, 27:0.0033, 28:0.003, 
	 29:0.0018, 30:0.0135, 31:0.00165, 32:0.00255, 33:0.0014, 34:0.0087}

x = { 1:0.0139,  2:0.2112,   3:0.0845,  4:0.1267,  5:0.192,   6:0.119,   7:0.0839,
      8:0.1037,  9:0.0883, 10:0.0605,  11:0.0614, 12:0.1651, 13:0.1651, 14:0.0839,
     15:0.0839, 16:0.0839, 17:0.0839,  18:0.0476, 19:0.0418, 20:0.0476, 21:0.0966,
     22:0.0865, 23:0.0389, 24:0.0173,  25:0.0245, 26:0.0519, 27:0.0259, 28:0.0231,
     29:0.0144, 30:0.1053, 31:0.01295, 32:0.0198, 33:0.0108, 34:0.0678}

b = { 1:0.4611,  2:0.0572,  3:0.0229,  4:0.0343,  5:0.052,   6:0.0322,  7:0,  8:0.0281, 9:0.0239, 
	 10:2.459,  11:0.0166, 12:0.0447, 13:0.0447, 14:0,      15:0,      16:0, 17:0, 18:0.0999, 
	 19:0.0879, 20:0.0999, 21:0.203,  22:0.1818, 23:0.0818, 24:0.0364, 25:0.206, 26:0.1091, 
	 27:0.0545, 28:0.0485, 29:0.0303, 30:0.2212, 31:0.109,  32:0.1666, 33:0.091, 34:0.1424}

Llim = { 1:175,  2:175,   3:175,  4:175,  5:175,  6:175,  7:400,  8:175,   9:175,  10:175, 11:175, 12:175, 
	    13:175, 14:400,  15:400, 16:400, 17:400, 18:500, 19:500, 20:500,  21:500,  22:500, 23:500, 
	    24:500, 25:1000, 26:500, 27:500, 28:500, 29:500, 30:500, 31:1000, 32:1000, 33:1000, 34:500}


#datos de la demanda
D    = ["d1",     "d2",    "d3",     "d4",    "d5",    "d6",     "d7",     "d8",
        "d9",     "d10",   "d11",    "d12",   "d13",   "d14",    "d15",    "d16",
        "d17"]

BusD = {"d1":1,   "d2":2,  "d3":3,   "d4":4,  "d5":5,  "d6":6,   "d7":7,   "d8":8,
        "d9":9,   "d10":10,"d11":13, "d12":14,"d13":15,"d14":16, "d15":18, "d16":19,
        "d17":20}

Pdmax= {"d1":108, "d2":97, "d3":180, "d4":74, "d5":71, "d6":136, "d7":125, "d8":171,
        "d9":175, "d10":195,"d11":265,"d12":194, "d13":317, "d14":100, "d15":333, "d16":181,
        "d17":128}

#Comportamiento de la carga en el tiempo
wind = {1:0.079, 2:0.087, 3:0.117, 4:0.259, 5:0.361, 6:0.567, 7:0.651, 8:0.567,
        9:0.484, 10:0.548, 11:0.757, 12:0.711, 13:0.871, 14:0.932, 15:0.967,
        16:1, 17:0.869, 18:0.665, 19:0.656, 20:0.561, 21:0.565, 22:0.556, 23:0.724, 24:0.84}

# LoadB = {1:0.685, 2:0.644, 3:0.613, 4:0.6, 5:0.589, 6:0.598, 7:0.627, 8:0.652, 
#         9:0.706, 10:0.787, 11:0.839, 12:0.853, 13:0.871, 14:0.834, 15:0.817, 
# 	    16:0.819, 17:0.874, 18:1, 19:0.984, 20:0.936, 21:0.888, 22:0.809, 23:0.746, 24:0.733}

# load = {1:0.685, 2:0.644, 3:0.613, 4:0.6, 5:0.589, 6:0.598, 7:0.627, 8:0.652, 
# 	9:0.706, 10:0.787, 11:0.839, 12:0.853, 13:0.871, 14:0.834, 15:0.817, 
# 	16:0.819, 17:0.874, 18:1, 19:0.984, 20:0.936, 21:0.888, 22:0.809, 
# 	23:0.746, 24:0.733}


LoadB = {"d1":0.685, "d2":0.644, "d3":0.613, "d4":0.6, "d5":0.589, "d6":0.598, "d7":0.627, "d8":0.652, 
        "d9":0.706, "d10":0.787, "d11":0.839, "d12":0.853, "d13":0.871, "d14":0.834, "d15":0.817, 
	    "d16":0.819, "d17":0.874, "d18":1, "d19":0.984, "d20":0.936, "d21":0.888, "d22":0.809, "d23":0.746, "d24":0.733}



import pyomo.environ as pye
# from FOP_5B3C5G_Data_ejm import *

#Creando Modelo
model = pye.ConcreteModel()

#-----------------Creando  Variable---------------------
def bound_Pg(model,g):#(Funcion de Regla)
    return(0,Pg_max[g])
model.Pg = pye.Var(G, bounds = bound_Pg)

def bound_Pe(model,e):
    return(0,Pe_max[e])
model.Pe = pye.Var(E, bounds = bound_Pe)

def bound_Pij(model,l):#(Funcion de Regla)
    return (-Llim[l],Llim[l])
model.Pij = pye.Var(L,bounds=bound_Pij)

#Definimos variable de angulo
model.Delta = pye.Var(N,bounds=(-1.5,1.5))#Radianes

model.Delta[slack].fix(0)

#------------------------Funcion Objetivo-------------------
#(los que se maximizara o minimizara)
model.obj_t = pye.Objective(expr=sum(model.Pg[g]*cg[g] for g in G))

#--------------------------Restricciones---------------------
def regla_FuljoP(model,l):#(Funcion de Regla)
    i,j = BusL[l]#Se usa "i,j" por que "bus_L" llamara auna tupla
    return model.Pij[l] == (model.Delta[i]-model.Delta[j])/x[l]

model.rest_FlujoP = pye.Constraint(L,rule = regla_FuljoP)
#sum(model.Pg[g] for g in G if i == L[i] or L[j])

# print (wind["d1"].key)
def balance_E_barras(model,n):#(Funcion de Regla)
    return  sum(model.Pg[g]  for g in G if (n == BusG[g])) - \
            sum(model.Pe[e]  for e in E if (n == BusE[e])) - \
            sum(LoadB[d]     for d in D if (n == BusD[d])) == \
            sum(model.Pij[l] for l in L if (n == BusL[l][0])) -\
            sum(model.Pij[l] for l in L if (n == BusL[l][1]))
model.rest_E_barras = pye.Constraint(N, rule = balance_E_barras)
#-------------------Solucionador--------------------------------
opf = pye.SolverFactory("glpk")
opf.solve(model)


r_glpk=pye.value(model.obj_t)
print(r_glpk)
# model.pprint()
# print(L)


         